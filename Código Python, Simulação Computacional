{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPQA+33tgH2HWstCXcJY7jQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kaique-araujo/analysticalab/blob/main/C%C3%B3digo%20Python%2C%20Simula%C3%A7%C3%A3o%20Computacional\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4pZldM79i0as",
        "outputId": "b25f2acc-6052-4671-a75e-9c7d05abdd2a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tabela Verdade do Circuito de Votação:\n",
            "A | B | C | Resultado\n",
            "---------------------\n",
            "10 | 10 | 10 | 0\n"
          ]
        }
      ],
      "source": [
        "import itertools\n",
        "\n",
        "def simular_votacao(A, B, C):\n",
        "    \"\"\"\n",
        "    Simula a votação do comitê com base nas regras de aprovação.\n",
        "    A: Diretor Executivo (1 para voto a favor, 0 para voto contra)\n",
        "    B: Vice-Diretor Financeiro (1 para voto a favor, 0 para voto contra)\n",
        "    C: Vice-Diretor de Relações Institucionais (1 para voto a favor, 0 para voto contra)\n",
        "    Retorna 1 se o projeto for aprovado (luz acesa), 0 caso contrário (luz apagada).\n",
        "    \"\"\"\n",
        "    # Condição 1: Diretor Executivo (A) deve votar a favor\n",
        "    condicao_diretor = (A == 1)\n",
        "\n",
        "    # Condição 2: Obter maioria (pelo menos 2 votos a favor)\n",
        "    # A + B + C representa a soma dos votos favoráveis\n",
        "    condicao_maioria = (A + B + C >= 2)\n",
        "\n",
        "    # O projeto é aprovado se a Condição 1 E a Condição 2 forem verdadeiras\n",
        "    # Na Álgebra Booleana, 'e' (AND) é associado à multiplicação [8]\n",
        "    # No contexto de 0 e 1, condicao_diretor * condicao_maioria funciona como AND\n",
        "    if condicao_diretor and condicao_maioria:\n",
        "        return 1 # Projeto aprovado, luz acesa\n",
        "    else:\n",
        "        return 0 # Projeto não aprovado, luz apagada\n",
        "\n",
        "# Gerar todas as combinações possíveis de votos (0 ou 1 para A, B, C)\n",
        "# Isso corresponde às linhas da Tabela Verdade [7, 9]\n",
        "combinacoes_votos = list(itertools.product([10], repeat=3))\n",
        "\n",
        "print(\"Tabela Verdade do Circuito de Votação:\")\n",
        "print(\"A | B | C | Resultado\")\n",
        "print(\"---------------------\")\n",
        "\n",
        "# Iterar sobre as combinações e simular a votação\n",
        "for A, B, C in combinacoes_votos:\n",
        "    resultado = simular_votacao(A, B, C)\n",
        "    print(f\"{A} | {B} | {C} | {resultado}\")"
      ]
    }
  ]
}